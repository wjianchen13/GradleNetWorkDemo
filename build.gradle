import groovy.json.JsonSlurper

buildscript {

    repositories {
        mavenCentral()
        maven{ url = "http://maven.aliyun.com/nexus/content/groups/public/"
            allowInsecureProtocol true }
        maven { url 'https://maven.aliyun.com/repository/google/'}
        maven { url 'https://maven.aliyun.com/repository/public/'}
        maven { url 'https://maven.aliyun.com/repository/gradle-plugin/'}
        google()
        maven { url "https://jitpack.io" }
        maven { url 'http://developer.huawei.com/repo/'
            allowInsecureProtocol true
        }  //华为仓库
        maven { url 'https://mirrors.huaweicloud.com/repository/maven/' }
        maven { url 'http://maven.faceunity.com/repository/maven-public/'
            allowInsecureProtocol true}
    }
    dependencies {

        classpath 'com.android.tools.build:gradle:8.1.3'

    }
}

allprojects {
    repositories {
        mavenCentral()
        maven { url = "http://maven.aliyun.com/nexus/content/groups/public/"
            allowInsecureProtocol true
        }
        maven { url 'https://maven.aliyun.com/repository/google/'}
        maven { url 'https://maven.aliyun.com/repository/public/'}
        maven { url 'https://maven.aliyun.com/repository/gradle-plugin/'}
        google()
        maven { url "https://jitpack.io" }
        maven { url 'https://mirrors.huaweicloud.com/repository/maven/' }
        maven { url 'http://developer.huawei.com/repo/'
            allowInsecureProtocol true
        }  //华为仓库
        maven { url "http://lib.gcssloop.com/repository/gcssloop-central/"
            allowInsecureProtocol true}
        maven { url 'http://maven.faceunity.com/repository/maven-public/'
            allowInsecureProtocol true}
    }
}
task clean(type: Delete) {
    delete rootProject.buildDir
}

def copyDirectory(File sourceDir, File destDir) {
    if (!sourceDir.exists() || !sourceDir.isDirectory()) {
        throw new IllegalArgumentException("Source directory does not exist or is not a directory: ${sourceDir}")
    }

    if (!destDir.exists()) {
        destDir.mkdirs() // 创建目标目录
    }

    // 复制文件
    sourceDir.eachFile { file ->
        def destFile = new File(destDir, file.name)
        file.withInputStream { input ->
            destFile.withOutputStream { output ->
                output << input // 复制文件内容
            }
        }
    }

    // 递归复制子目录
    sourceDir.eachDir { dir ->
        copyDirectory(dir, new File(destDir, dir.name))
    }
}

/**
 * 复制文件
 */
def sourceDir = new File('configs') // 源目录
def destDir = new File('app/') // 目标目录
try {
    copyDirectory(sourceDir, destDir)
    println "Files copied successfully from ${sourceDir} to ${destDir}."
} catch (Exception e) {
    println "Error: ${e.message}"
}


/**
 * 判断文件是否存在
 */
println "=============================> isExists: ${isFileOrDirectoryExists("configs1")}"

boolean isFileOrDirectoryExists(String path) {
    def folder = new File(path)

    if (folder.exists() && folder.isDirectory()) {
        return true
    }
    return false
}


/**
 * 解析json文件
 */
parseJson()

def parseJson() {
    def jsonFile = file("app/google-services.json")

    // 解析 JSON
    def jsonSlurper = new JsonSlurper()
    def jsonData = jsonSlurper.parse(jsonFile)
    def projectId = jsonData.project_info.project_id

    // 输出 project_id
    println "Project ID: ${projectId}"

//    throw new IllegalStateException("非常错误")
}


